syntax = "proto3";

package blog;

import "google/api/annotations.proto";

option go_package = "blog/gen;blogpb";


// Автор поста
message Author {
  string id = 1;
  string nickname = 2;
  string avatar = 3;
}

// Пост
message Post {
  string id = 1;
  Author author = 2;
  string body = 3;
  string created_at = 4;
  int32 like_count = 5;
  bool is_like = 6;
}

// Запрос на получение постов
message GetPostsRequest {
  int32 limit = 1; // сколько элементов вернуть за один запрос
  int32 offset = 2; // сколько элементов пропускать с начала списка
  string user_id = 3;
}

// Ответ со списком постов
message GetPostsResponse {
  repeated Post posts = 1;
}

message CreatePostRequest {
  string user_id = 1;
  string body = 2;
}

message CreatePostResponse {
  Post post = 1;
}

message DeletePostRequest {
  string post_id = 1;
  string user_id = 2;
}

message DeletePostResponse {
  bool success = 1;
}

message EditPostRequest {
  string post_id = 1;
  string user_id = 2;
  string body = 3;
}

message EditPostResponse {
  Post post = 1;
}

message LikePostRequest {
  string post_id = 1;
  string user_id = 2;
}

message LikePostResponse {
  Post post = 1;
}

message UnlikePostRequest {
  string post_id = 1;
  string user_id = 2;
}

message UnlikePostResponse {
  Post post = 1;
}

service BlogService {
  rpc GetPosts(GetPostsRequest) returns (GetPostsResponse) {
    option (google.api.http) = {
      get: "/v1/posts"
    };
  }

  rpc CreatePost(CreatePostRequest) returns (CreatePostResponse) {
    option (google.api.http) = {
      post: "/v1/posts"
      body: "*"
    };
  }

  rpc EditPost(EditPostRequest) returns (EditPostResponse) {
    option (google.api.http) = {
      put: "/v1/posts/{post_id}"
      body: "*"
    };
  }

  rpc DeletePost(DeletePostRequest) returns (DeletePostResponse) {
    option (google.api.http) = {
      delete: "/v1/posts/{post_id}"
    };
  }

  rpc LikePost(LikePostRequest) returns (LikePostResponse) {
    option (google.api.http) = {
      post: "/v1/posts/{post_id}/like"
      body: "*"
    };
  }

  rpc UnlikePost(UnlikePostRequest) returns (UnlikePostResponse) {
    option (google.api.http) = {
      post: "/v1/posts/{post_id}/unlike"
      body: "*"
    };
  }
}
